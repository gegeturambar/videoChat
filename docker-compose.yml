services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8001
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - CORS_ORIGINS=http://localhost:3000
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=videoqa
      - POSTGRES_PASSWORD=videoqa_password
      - POSTGRES_DB=videoqa
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_AUTH_ENABLED=false
      - CHROMA_TENANT=videochat
      - CHROMA_DATABASE=videochat_db
    depends_on:
      postgres:
        condition: service_healthy
      chromadb-init:
        condition: service_completed_successfully
      chromadb: 
        condition: service_healthy
    networks:
      - app-network
  
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=videoqa
      - POSTGRES_PASSWORD=videoqa_password
      - POSTGRES_DB=videoqa
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videoqa"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  
  chromadb:
    build:
      context: ./chromadb
      dockerfile: Dockerfile
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - ALLOW_RESET=true
      - ANONYMIZED_TELEMETRY=false
      - IS_PERSISTENT=true
      - CHROMA_SERVER_AUTH_CREDENTIALS=none
      - CHROMA_SERVER_AUTH_PROVIDER=none
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=none
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  chromadb-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    environment:
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    command: python scripts/init_chroma.py
    depends_on:
      chromadb:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres-data:
  chroma-data:

networks:
  app-network:
    driver: bridge